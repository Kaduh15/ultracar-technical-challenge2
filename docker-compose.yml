version: '3.9'
services:
  frontend:
    container_name: app_frontend
    build: ./app/frontend
    ports:
      - 3000:3000
    platform: linux/x86_64
    depends_on:
      backend:
        condition: service_healthy
    environment:
      - BASE_URL=http://backend:3001
    # Os `healthcheck` devem garantir que a aplicação
    # está operacional, antes de liberar o container
    healthcheck:
      test: ["CMD", "lsof", "-t", "-i:3000"]  # Caso utilize outra porta interna para o front, altere ela aqui também
      timeout: 10s
      retries: 5
    networks:
      - net

  backend:
    container_name: app_backend
    build: ./app/backend
    ports:
      - 3001:3001
      - 5555:5555
    platform: linux/x86_64
    depends_on:
      db:
        condition: service_healthy
    environment:
      - APP_PORT=3001
      # Os dados abaixo se referem ao container `db`
      # Dica: Relembre aqui da comunicação interna entre containers
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/postgres
    healthcheck:
      test: ["CMD", "lsof", "-t", "-i:3001"] # Caso utilize outra porta interna para o back, altere ela aqui também
      timeout: 10s
      retries: 5
    networks:
      - net

  db:
    image: postgres
    container_name: db
    platform: linux/x86_64
    ports:
      - 3003:5432
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    restart: 'always'
    healthcheck:
      test: pg_isready -U myuser -d db_prod # Deve aguardar o banco ficar operacional
      interval: 10s
      timeout: 3s
      retries: 3
    cap_add:
      - SYS_NICE # Deve omitir alertas menores
    networks:
      - net

networks:
  net:
    driver: bridge